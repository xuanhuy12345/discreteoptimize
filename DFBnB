#!/usr/bin/python
# -*- coding: utf-8 -*-

from collections import namedtuple
Item = namedtuple("Item", ['index', 'value', 'weight'])


def solve_it(input_data):
    # Modify this code to run your optimization algorithm

    # parse the input
    lines = input_data.split('\n')

    firstLine = lines[0].split()
    item_count = int(firstLine[0])
    capacity = int(firstLine[1])

    items = []

    for i in range(1, item_count+1):
        line = lines[i]
        parts = line.split()
        items.append(Item(i-1, int(parts[0]), int(parts[1])))
    items.sort(key=lambda x: x.value / x.weight, reverse=True)
    
    opt_value = 0
    opt_weight = 0
    opt_taken = [0] * item_count

    for item in items:
        if opt_weight + item.weight <= capacity:
            opt_taken[item.index] = 1
            opt_value += item.value
            opt_weight += item.weight
        else: 
            opt_est = opt_value + item.value * (capacity - opt_weight) / item.weight
            break

    if item_count < 1000:
        best_value = 0
        weight = 0
        opt_est = opt_est
        best_taken = [0] * item_count

        def bnb(index, value, weight):
            bound = value
            remaining = capacity - weight
            for i in range(index, item_count):
                item = items[i]
                if item.weight <= remaining:
                    bound += item.value
                    remaining -= item.weight
                else:
                    bound += item.value * (remaining / item.weight)
                    break
            return bound

        def dfs(index, value, weight, taken):
            nonlocal best_value, best_taken

            if index == item_count:
                if value > best_value:
                    best_value = value
                    best_taken = taken[:]
                return

            bound = bnb(index, value, weight)
            if bound <= best_value:
                return 

            item = items[index]

            # Try taking the item
            if weight + item.weight <= capacity:
                taken[item.index] = 1
                dfs(index + 1, value + item.value, weight + item.weight, taken)
                taken[item.index] = 0 

            # Try not taking the item
            taken[item.index] = 0
            dfs(index + 1, value, weight, taken)
        
        dfs(0, 0, 0, [0] * item_count)
        value = best_value
        taken = best_taken
    else:  
        value = opt_value
        taken = opt_taken

    # prepare the solution in the specified output format
    output_data = str(value) + ' ' + str(0) + '\n'
    output_data += ' '.join(map(str, taken))
    return output_data


if __name__ == '__main__':
    import sys
    if len(sys.argv) > 1:
        file_location = sys.argv[1].strip()
        with open(file_location, 'r') as input_data_file:
            input_data = input_data_file.read()
        print(solve_it(input_data))
    else:
        print('This test requires an input file.  Please select one from the data directory. (i.e. python solver.py ./data/ks_4_0)')

